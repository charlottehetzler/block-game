{"version":3,"sources":["components/scene/Scene.tsx","components/scene/Camera.ts","App.tsx","index.tsx","App.module.scss"],"names":["camera","scene","renderer","stack","gameStarted","addLayer","x","z","width","depth","direction","layer","y","geometry","THREE","color","length","material","mesh","position","set","add","threejs","generateBox","push","animation","topLayer","count","element","document","querySelector","innerHTML","toString","renderCount","render","Scene","ambientLight","directionalLight","height","window","innerHeight","innerWidth","Camera","lookAt","antialias","setSize","rootElement","getElementById","appendChild","domElement","addEventListener","setAnimationLoop","App","useState","devEnabled","useEffect","id","styles","dev","app","className","ReactDOM","StrictMode","module","exports"],"mappings":"0HAoBIA,EAAsBC,EAAoBC,E,qEADxCC,EAAe,GAEjBC,GAAc,EAElB,SAASC,EAAT,GAAgE,IAA7CC,EAA4C,EAA5CA,EAAGC,EAAyC,EAAzCA,EAAGC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,UAGhCC,EAMP,YAAyD,IAAnCL,EAAkC,EAAlCA,EAAGM,EAA+B,EAA/BA,EAAGL,EAA4B,EAA5BA,EAAGC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAC/BI,EAAW,IAAIC,IAAkBN,EAftB,EAewCC,GAEnDM,EAAQ,IAAID,IAAJ,cAAuB,GAAoB,EAAfX,EAAMa,OAAlC,iBACRC,EAAW,IAAIH,IAA0B,CAAEC,MAAOA,IAClDG,EAAO,IAAIJ,IAAWD,EAAUI,GAOtC,OANAC,EAAKC,SAASC,IAAId,EAAGM,EAAGL,GAExBN,EAAMoB,IAAIH,GAIH,CACNI,QAASJ,EACTV,QACAC,QACAC,UANiB,KAhBJa,CAAY,CAACjB,IAAGM,EARb,EAMKT,EAAMa,OAEKT,IAAGC,QAAOC,UAC3CE,EAAMD,UAAYA,EAElBP,EAAMqB,KAAKb,GAuBZ,SAASc,IACR,IAEMC,EAAWvB,EAAMA,EAAMa,OAAS,GACtCU,EAASJ,QAAQH,SAASO,EAAShB,YAHrB,IAcf,SAAqBiB,GACpB,IAAMC,EAAUC,SAASC,cAAc,UACvCF,IAAUA,EAAQG,UAAYJ,EAAMK,YAXjCC,CAAY9B,EAAMa,QAEjBhB,EAAOmB,SAASP,EA1CH,GA0CoBT,EAAMa,OAAS,GAAK,IACxDhB,EAAOmB,SAASP,GARH,KAWdV,EAASgC,OAAOjC,EAAOD,GAQxB,IA4CemC,EA5CD,WAGblC,EAAQ,IAAIa,IAEZT,EAAS,CAAEC,EAAG,EAAGC,EAAG,EAAGC,MAJC,EAIuBC,MAJvB,EAI+CC,UAAW,MAClFL,EAAS,CAAEC,GAAI,GAAIC,EAAG,EAAGC,MALD,EAKyBC,MALzB,EAKiDC,UAAW,MAEpF,IAAM0B,EAAe,IAAItB,IAAmB,SAAU,IACtDb,EAAMoB,IAAIe,GAEV,IAAMC,EAAmB,IAAIvB,IAAuB,SAAU,IAC9DuB,EAAiBlB,SAASC,IAAI,GAAI,GAAI,GACtCnB,EAAMoB,IAAIgB,IAEVrC,ECrFqB,WACrB,IACMsC,EADQ,GACUC,OAAOC,YAAcD,OAAOE,WAIpD,OAAO,IAAI3B,KACVN,EACAA,EACA8B,EAAS,EACTA,GAAU,EAPE,EACD,KDiFHI,IACFvB,SAASC,IAAI,EAAG,EAAG,GAC1BpB,EAAO2C,OAAO,EAAG,EAAG,IAEpBzC,EAAW,IAAIY,IAAoB,CAAE8B,WAAW,KACvCC,QAAQN,OAAOE,WAAYF,OAAOC,aAC3CtC,EAASgC,OAAOjC,EAAOD,GAEvB,IAAM8C,EAAcjB,SAASkB,eAAe,QAC5CD,GAAcA,EAAYE,YAAY9C,EAAS+C,YAE/CV,OAAOW,iBAAiB,SAAS,WAChC,GAAI9C,EAGG,CACN,IACMM,EADWP,EAAMA,EAAMa,OAAS,GACXN,UAQ3BL,EAAS,CAAEC,EANgB,KAAbI,EAAmB,GAAK,GAMjBH,EALM,KAAbG,EAAmB,GAAK,GAKPF,MAvCT,EAuC0BC,MAvC1B,EAuC2CC,UAF9B,KAAbA,EAAmB,IAAM,WAV/CR,EAASiD,iBAAiB1B,GAC1BrB,GAAc,M,OE5EFgD,EAnBC,WAAO,IAAD,EACeC,oBAAS,GADxB,mBACdC,EADc,UAOrB,OAJAC,qBAAU,WACTpB,MACE,IAGF,qCACGmB,EAAa,qBAAKE,GAAKC,IAAOC,IAAjB,SACd,cAAC,IAAD,MACQ,KACT,qBAAKF,GAAKC,IAAOE,IAAjB,SACC,qBAAKH,GAAG,QAAQI,UAAYH,IAAO9B,MAAnC,qBCfJkC,IAAS3B,OACR,cAAC,IAAM4B,WAAP,UACC,cAAC,EAAD,MAEDjC,SAASkB,eAAe,U,kBCPzBgB,EAAOC,QAAU,CAAC,KAAO,kBAAkB,IAAM,iBAAiB,MAAQ,sB","file":"static/js/main.c4d8cc9e.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { Camera } from \"./Camera\";\n\ntype LayerProps = {\n    x: number,\n    z: number,\n    width: number,\n    depth: number,\n    direction: string\n}\ntype BoxProps = {\n    x: number,\n    y: number,\n    z: number,\n    width: number,\n    depth: number\n}\n\nconst boxHeight = 1;\nconst stack: any[] = [];\nlet camera: THREE.Camera, scene: THREE.Scene, renderer: THREE.WebGLRenderer;\nlet gameStarted = false;\n\nfunction addLayer({x, z, width, depth, direction}: LayerProps) {\n\tconst y = boxHeight * stack.length;\n\n\tconst layer = generateBox({x, y, z, width, depth});\n\tlayer.direction = direction;\n    \n\tstack.push(layer);\n}\n\nfunction generateBox({x, y, z, width, depth}: BoxProps) {\n\tconst geometry = new THREE.BoxGeometry(width, boxHeight, depth);\n\n\tconst color = new THREE.Color(`hsl(${30 + stack.length * 4}, 100%, 50%)`);\n\tconst material = new THREE.MeshLambertMaterial({ color: color });\n\tconst mesh = new THREE.Mesh(geometry, material);\n\tmesh.position.set(x, y, z);\n\n\tscene.add(mesh);\n\n\tconst direction = \"x\";\n\n\treturn {\n\t\tthreejs: mesh,\n\t\twidth,\n\t\tdepth,\n\t\tdirection\n\t};\n}\n\nfunction animation() {\n\tconst speed = 0.15;\n\n\tconst topLayer = stack[stack.length - 1];\n\ttopLayer.threejs.position[topLayer.direction] += speed;\n\n    renderCount(stack.length);\n\n\tif (camera.position.y < boxHeight * (stack.length - 2) + 4) {\n\t\tcamera.position.y += speed;\n\t}\n\n\trenderer.render(scene, camera);\n}\n\nfunction renderCount(count: number) {\n\tconst element = document.querySelector(\"#count\");\n\telement ? element.innerHTML = count.toString() : null;\n}\n\nconst Scene = () => {\n\tconst originalBoxSize = 3;\n\n\tscene = new THREE.Scene();\n\n\taddLayer({ x: 0, z: 0, width: originalBoxSize, depth: originalBoxSize, direction: \"x\" });\n\taddLayer({ x: -10, z: 0, width: originalBoxSize, depth: originalBoxSize, direction: \"z\" });\n\n\tconst ambientLight = new THREE.AmbientLight(0xffffff, .6);\n\tscene.add(ambientLight);\n\n\tconst directionalLight = new THREE.DirectionalLight(0xffffff, .6);\n\tdirectionalLight.position.set(10, 20, 0);\n\tscene.add(directionalLight);\n\n\tcamera = Camera();\n\tcamera.position.set(4, 4, 4);\n\tcamera.lookAt(0, 0, 0);\n\n\trenderer = new THREE.WebGLRenderer({ antialias: true });\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n\trenderer.render(scene, camera);\n    \n\tconst rootElement = document.getElementById(\"root\");\n\trootElement ? rootElement.appendChild(renderer.domElement) : null;\n\n\twindow.addEventListener(\"click\", () => {\n\t\tif(!gameStarted) {\n\t\t\trenderer.setAnimationLoop(animation);\n\t\t\tgameStarted = true;\n\t\t} else {\n\t\t\tconst topLayer = stack[stack.length - 1];\n\t\t\tconst direction = topLayer.direction;\n\n\t\t\tconst nextX = direction == \"x\" ? 0 : -10;\n\t\t\tconst nextZ = direction == \"z\" ? 0 : -10;\n\t\t\tconst newWidth = originalBoxSize;\n\t\t\tconst newDepth = originalBoxSize;\n\t\t\tconst nextDirection = direction == \"x\" ? \"z\" : \"x\";\n\n\t\t\taddLayer({ x: nextX, z: nextZ, width: newWidth, depth: newDepth, direction: nextDirection });\n\t\t}\n\t});\n};\nexport default Scene;","import * as THREE from \"three\";\n\nexport const Camera = () => {\n\tconst width = 10;\n\tconst height = width + (window.innerHeight / window.innerWidth);\n\tconst near = 1;\n\tconst far = 100;\n\n\treturn new THREE.OrthographicCamera(\n\t\twidth / -2,\n\t\twidth / 2,\n\t\theight / 2,\n\t\theight / -2,\n\t\tnear,\n\t\tfar\n\t);\n};","import React, { useEffect, useState, FC } from \"react\";\nimport { FPSStats } from \"fps-react\";\n\nimport styles from \"./App.module.scss\";\nimport Scene from \"./components/scene/Scene\";\n\nconst App: FC = () => {\n\tconst [devEnabled, setDevEnabled] = useState(true);\n\n\tuseEffect(() => {\n\t\tScene();\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t{ devEnabled ? <div id={ styles.dev }>\n\t\t\t\t<FPSStats />\n\t\t\t</div> : null }\n\t\t\t<div id={ styles.app }>\n\t\t\t\t<div id=\"count\" className={ styles.count }>0</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__2CSG3\",\"app\":\"App_app__2ziFi\",\"count\":\"App_count__32WNx\"};"],"sourceRoot":""}